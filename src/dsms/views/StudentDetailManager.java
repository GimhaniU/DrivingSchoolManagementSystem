/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dsms.views;

import dsms.common_classes.*;
import dsms.controllers.*;
import dsms.models.*;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author User
 */
public class StudentDetailManager extends javax.swing.JInternalFrame {

    Double totalFee = null;
    Registration registration = null;
    DocumentSet docs = null;
    OldLicenseDetail oldLicensedetail = null;
    ExamDetail examDetail = null;
    TrialDetail trialDetail = null;
    static int fivePhotos = 1, medical = 1, nicPhotocopy = 1, bCertificate = 1, oldLicense = 0;
    static String sid, driLicNo, dlIssueDate, dlExpiredate, classes;
    int paymentPress = 0;
    Student student = null;
    VehicleClassSet vcs = null;

    public StudentDetailManager() {
        try {
            initComponents();
            setTitle("Student Detail");
            ComboItemsAdder.addAllVehicleClass(classComboBox);
            vcs = VehicleClassController.searchVehicleClassSetByName(classComboBox.getSelectedItem().toString());
            ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, vcs.getClassId());
            ComboItemsAdder.addAllStudentTraining(studentCombo);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        setNullText();
        ComboSearch.setSearchableCombo(studentCombo, true, "No student");
        oldLicensePanel.setEnabled(false);
        setLicensePanelEnabled(false);
        oldLicenceCheck.setEnabled(false);
        finishedLabel.setVisible(false);
        notValidNicLabel.setVisible(false);
        notValidTelLabel1.setVisible(false);

    }

    public void requestFocusForm() {
        studentCombo.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        nameWithInitialsLabel = new javax.swing.JLabel();
        nameWithInitialsText = new javax.swing.JTextField();
        surnameLabel = new javax.swing.JLabel();
        surnameText = new javax.swing.JTextField();
        telLabel = new javax.swing.JLabel();
        telText = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        nicLabel = new javax.swing.JLabel();
        nicText = new javax.swing.JTextField();
        addressText = new javax.swing.JTextField();
        genderLabel = new javax.swing.JLabel();
        maleRButton = new javax.swing.JRadioButton();
        femaleRButton = new javax.swing.JRadioButton();
        notValidTelLabel = new javax.swing.JLabel();
        notValidNicLabel = new javax.swing.JLabel();
        notValidTelLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        classLabel = new javax.swing.JLabel();
        classComboBox = new javax.swing.JComboBox();
        instructorLabel = new javax.swing.JLabel();
        instructorComboBox = new javax.swing.JComboBox();
        oldLicensePanel = new javax.swing.JPanel();
        oldVehicleClassLabel = new javax.swing.JLabel();
        classComboBox1 = new javax.swing.JComboBox();
        driLicNoLabel = new javax.swing.JLabel();
        driLicNoText = new javax.swing.JTextField();
        dlIssueDateText = new javax.swing.JTextField();
        dlIssueDateLabel = new javax.swing.JLabel();
        dlExpireDateLabel = new javax.swing.JLabel();
        dlExpireDateText = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        totalFeeLabel1 = new javax.swing.JLabel();
        totalFeeText = new javax.swing.JTextField();
        discountLabel = new javax.swing.JLabel();
        discountText = new javax.swing.JTextField();
        paidTotalLabel = new javax.swing.JLabel();
        paidTotalText = new javax.swing.JTextField();
        balanceToPayLabel = new javax.swing.JLabel();
        balanceToPayText = new javax.swing.JTextField();
        jPanel29 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        examResultText = new javax.swing.JTextField();
        examDateText = new javax.swing.JTextField();
        trialDateText = new javax.swing.JTextField();
        trialResultText = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        lectureDateText = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        photoCheck = new javax.swing.JCheckBox();
        medicalCheck = new javax.swing.JCheckBox();
        nicPhotocopyCheck = new javax.swing.JCheckBox();
        birthCertiCheck = new javax.swing.JCheckBox();
        oldLicenceCheck = new javax.swing.JCheckBox();
        jPanel28 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        trainingRButton = new javax.swing.JRadioButton();
        finishedRButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        studentCombo = new javax.swing.JComboBox();
        searchButton1 = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        registrationIdCombo = new javax.swing.JComboBox();
        finishedLabel = new javax.swing.JLabel();
        dateOfRegText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        printButton = new javax.swing.JToggleButton();
        updateButton = new javax.swing.JToggleButton();
        deleteButton = new javax.swing.JToggleButton();
        exitButton = new javax.swing.JButton();

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal Detaills"));

        nameWithInitialsLabel.setText("Name with initials:");

        nameWithInitialsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameWithInitialsTextKeyPressed(evt);
            }
        });

        surnameLabel.setText("Surname:");

        surnameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                surnameTextKeyPressed(evt);
            }
        });

        telLabel.setText("Telephone:");

        telText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                telTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                telTextKeyReleased(evt);
            }
        });

        addressLabel.setText("Address:");

        nicLabel.setText("NIC no:");

        nicText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nicTextKeyReleased(evt);
            }
        });

        addressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextActionPerformed(evt);
            }
        });
        addressText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addressTextKeyPressed(evt);
            }
        });

        genderLabel.setText("Gender:");

        buttonGroup2.add(maleRButton);
        maleRButton.setText("Male");
        maleRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleRButtonActionPerformed(evt);
            }
        });
        maleRButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                maleRButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maleRButtonKeyReleased(evt);
            }
        });

        buttonGroup2.add(femaleRButton);
        femaleRButton.setText("Female");
        femaleRButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                femaleRButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                femaleRButtonKeyReleased(evt);
            }
        });

        notValidTelLabel.setForeground(new java.awt.Color(255, 0, 0));

        notValidNicLabel.setForeground(new java.awt.Color(255, 0, 0));
        notValidNicLabel.setText("Illegal!");

        notValidTelLabel1.setForeground(new java.awt.Color(255, 0, 0));
        notValidTelLabel1.setText("Not valid!");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nicLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addressLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addComponent(genderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(telLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(surnameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameWithInitialsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameWithInitialsText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(notValidTelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(maleRButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(femaleRButton))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(nicText, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(notValidNicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(telText, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(notValidTelLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(surnameText, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notValidTelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameWithInitialsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameWithInitialsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(surnameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(surnameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telLabel)
                    .addComponent(notValidTelLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nicLabel)
                    .addComponent(nicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notValidNicLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genderLabel)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maleRButton)
                        .addComponent(femaleRButton))))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Vehicle Classes Details"));

        classLabel.setText("Vehicle classes");

        classComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classComboBoxActionPerformed(evt);
            }
        });

        instructorLabel.setText("Instructor:");

        oldLicensePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("License Details"));
        oldLicensePanel.setEnabled(false);

        oldVehicleClassLabel.setText("Vehicle classes");

        classComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classComboBox1ActionPerformed(evt);
            }
        });

        driLicNoLabel.setText("Driving License No:");

        driLicNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                driLicNoTextKeyPressed(evt);
            }
        });

        dlIssueDateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dlIssueDateTextKeyPressed(evt);
            }
        });

        dlIssueDateLabel.setText("DL Issued date:");

        dlExpireDateLabel.setText("DL Expire date:");

        dlExpireDateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dlExpireDateTextKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout oldLicensePanelLayout = new javax.swing.GroupLayout(oldLicensePanel);
        oldLicensePanel.setLayout(oldLicensePanelLayout);
        oldLicensePanelLayout.setHorizontalGroup(
            oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oldLicensePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(driLicNoLabel)
                    .addComponent(dlIssueDateLabel)
                    .addComponent(dlExpireDateLabel)
                    .addComponent(oldVehicleClassLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dlExpireDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(driLicNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dlIssueDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        oldLicensePanelLayout.setVerticalGroup(
            oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oldLicensePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driLicNoLabel)
                    .addComponent(driLicNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlIssueDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dlIssueDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlExpireDateLabel)
                    .addComponent(dlExpireDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(oldLicensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldVehicleClassLabel)
                    .addComponent(classComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classLabel)
                            .addComponent(instructorLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(oldLicensePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classLabel)
                    .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instructorLabel)
                    .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(oldLicensePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Summary"));

        totalFeeLabel1.setText("Total fee:");

        totalFeeText.setEditable(false);
        totalFeeText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        discountLabel.setText("Discount:");

        discountText.setEditable(false);
        discountText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        paidTotalLabel.setText("Paid Total:");

        paidTotalText.setEditable(false);
        paidTotalText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        balanceToPayLabel.setText("Balance To Pay:");

        balanceToPayText.setEditable(false);
        balanceToPayText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(balanceToPayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(balanceToPayText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalFeeLabel1)
                            .addComponent(discountLabel)
                            .addComponent(paidTotalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paidTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalFeeText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalFeeLabel1)
                    .addComponent(totalFeeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountLabel)
                    .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paidTotalLabel)
                    .addComponent(paidTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(balanceToPayLabel)
                    .addComponent(balanceToPayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jPanel29.setBorder(javax.swing.BorderFactory.createTitledBorder("Result Summary"));

        jLabel1.setText("Exam Date:");

        jLabel26.setText("Exam Result:");

        jLabel31.setText("Trial Date:");

        jLabel32.setText("Trial Result:");

        examResultText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                examResultTextKeyPressed(evt);
            }
        });

        examDateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                examDateTextKeyPressed(evt);
            }
        });

        trialDateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                trialDateTextKeyPressed(evt);
            }
        });

        trialResultText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                trialResultTextKeyPressed(evt);
            }
        });

        jLabel3.setText("Lecture Date:");

        lectureDateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lectureDateTextKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel29Layout.createSequentialGroup()
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel29Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(17, 17, 17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel29Layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(examDateText)
                            .addComponent(examResultText)))
                    .addGroup(jPanel29Layout.createSequentialGroup()
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trialDateText)
                            .addComponent(trialResultText)))
                    .addGroup(jPanel29Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(lectureDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addGap(7, 7, 7)))
                .addContainerGap())
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel29Layout.createSequentialGroup()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lectureDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(examDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(examResultText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(trialDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(trialResultText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Mark Documents"));

        photoCheck.setText("5 passport size photos");
        photoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoCheckActionPerformed(evt);
            }
        });
        photoCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                photoCheckKeyPressed(evt);
            }
        });

        medicalCheck.setText("Medical Report taken from a MBBS doctor");
        medicalCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalCheckActionPerformed(evt);
            }
        });
        medicalCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                medicalCheckKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                medicalCheckKeyReleased(evt);
            }
        });

        nicPhotocopyCheck.setText("NIC photocopy signed by GramaNiladari");
        nicPhotocopyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicPhotocopyCheckActionPerformed(evt);
            }
        });
        nicPhotocopyCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicPhotocopyCheckKeyPressed(evt);
            }
        });

        birthCertiCheck.setText("BirthCertificate signed by GramaNiladari");
        birthCertiCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                birthCertiCheckActionPerformed(evt);
            }
        });
        birthCertiCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                birthCertiCheckKeyPressed(evt);
            }
        });

        oldLicenceCheck.setText("Photocopy of Old Licence");
        oldLicenceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldLicenceCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photoCheck)
                            .addComponent(medicalCheck)
                            .addComponent(nicPhotocopyCheck))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(birthCertiCheck)
                            .addComponent(oldLicenceCheck))
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(photoCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(medicalCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nicPhotocopyCheck)
                .addGap(3, 3, 3)
                .addComponent(birthCertiCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oldLicenceCheck)
                .addGap(131, 131, 131))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel28.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel30.setText("Status:");

        buttonGroup1.add(trainingRButton);
        trainingRButton.setSelected(true);
        trainingRButton.setText("Training");
        trainingRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingRButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(finishedRButton);
        finishedRButton.setText("Finished");
        finishedRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Student ID  :");

        studentCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentComboActionPerformed(evt);
            }
        });

        searchButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dsms/icons/16x16/Search.png"))); // NOI18N
        searchButton1.setText("Search");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Registration IDs  :");

        registrationIdCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationIdComboActionPerformed(evt);
            }
        });

        finishedLabel.setForeground(new java.awt.Color(255, 51, 0));
        finishedLabel.setText("Finished now!");

        dateOfRegText.setEditable(false);
        dateOfRegText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dateOfRegTextKeyPressed(evt);
            }
        });

        jLabel4.setText("Date Of  Reg:");

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel28Layout.createSequentialGroup()
                                .addComponent(registrationIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(finishedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel28Layout.createSequentialGroup()
                                .addComponent(studentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchButton1))))
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finishedRButton)
                            .addGroup(jPanel28Layout.createSequentialGroup()
                                .addComponent(trainingRButton)
                                .addGap(92, 92, 92)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateOfRegText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(trainingRButton)
                    .addComponent(jLabel4)
                    .addComponent(dateOfRegText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finishedRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(studentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(searchButton1))
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(registrationIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finishedLabel))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        printButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dsms/icons/16x16/Print.png"))); // NOI18N
        printButton.setText("Print");
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        jPanel9.add(printButton);

        updateButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dsms/icons/16x16/Update.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel9.add(updateButton);

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dsms/icons/16x16/Erase.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel9.add(deleteButton);

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dsms/icons/16x16/Cancel.png"))); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jPanel9.add(exitButton);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameWithInitialsTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameWithInitialsTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            surnameText.requestFocus();
        }
    }//GEN-LAST:event_nameWithInitialsTextKeyPressed

    private void surnameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_surnameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            telText.requestFocus();
        }
    }//GEN-LAST:event_surnameTextKeyPressed

    private void telTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addressText.requestFocus();
        }
    }//GEN-LAST:event_telTextKeyPressed

    private void nicTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // maleRButton.requestFocus();
        }
    }//GEN-LAST:event_nicTextKeyPressed

    private void addressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextActionPerformed
    }//GEN-LAST:event_addressTextActionPerformed

    private void addressTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            nicText.requestFocus();
        }
    }//GEN-LAST:event_addressTextKeyPressed

    private void trainingRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingRButtonActionPerformed
        if (trainingRButton.isSelected() == true) {
            try {
                ComboItemsAdder.addAllStudentTraining(studentCombo);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_trainingRButtonActionPerformed

    private void finishedRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRButtonActionPerformed
        if (finishedRButton.isSelected() == true) {
            try {
                ComboItemsAdder.addAllStudentFinished(studentCombo);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_finishedRButtonActionPerformed

    private void studentComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentComboActionPerformed
        addDataToForm();
        System.out.println("student");
        enableSave();
    }//GEN-LAST:event_studentComboActionPerformed

    private void examResultTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_examResultTextKeyPressed
    }//GEN-LAST:event_examResultTextKeyPressed

    private void examDateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_examDateTextKeyPressed
    }//GEN-LAST:event_examDateTextKeyPressed

    private void trialDateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_trialDateTextKeyPressed
    }//GEN-LAST:event_trialDateTextKeyPressed

    private void trialResultTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_trialResultTextKeyPressed
    }//GEN-LAST:event_trialResultTextKeyPressed

    private void classComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classComboBox1ActionPerformed
        classes = classComboBox.getSelectedItem().toString();
    }//GEN-LAST:event_classComboBox1ActionPerformed

    private void driLicNoTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_driLicNoTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // driLicNo = driLicNoText.getText();
            dlIssueDateText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            discountText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            dlIssueDateText.requestFocus();
        }
    }//GEN-LAST:event_driLicNoTextKeyPressed

    private void dlIssueDateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dlIssueDateTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //  dlIssueDate = dlIssueDateText.getText();
            dlExpireDateText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            driLicNoText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            dlExpireDateText.requestFocus();
        }

    }//GEN-LAST:event_dlIssueDateTextKeyPressed

    private void dlExpireDateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dlExpireDateTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //  dlExpiredate = dlExpireDateText.getText();
            classComboBox1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            dlIssueDateText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            classComboBox.requestFocus();
        }

    }//GEN-LAST:event_dlExpireDateTextKeyPressed

    private void photoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoCheckActionPerformed
        if (photoCheck.isSelected() == true) {
            fivePhotos = 1;
        } else {
            fivePhotos = 0;
        }
        medicalCheck.requestFocus();
    }//GEN-LAST:event_photoCheckActionPerformed

    private void photoCheckKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_photoCheckKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (photoCheck.isSelected() == true) {
                photoCheck.setSelected(false);
                fivePhotos = 1;
            } else {
                photoCheck.setSelected(true);
                fivePhotos = 0;
            }

        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            discountText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            medicalCheck.requestFocus();
        }
    }//GEN-LAST:event_photoCheckKeyPressed

    private void medicalCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalCheckActionPerformed
        if (medicalCheck.isSelected() == true) {
            medical = 1;
        } else {
            medical = 0;
        }
        nicPhotocopyCheck.requestFocus();
    }//GEN-LAST:event_medicalCheckActionPerformed

    private void medicalCheckKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medicalCheckKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            photoCheck.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            nicPhotocopyCheck.requestFocus();
        }
    }//GEN-LAST:event_medicalCheckKeyPressed

    private void medicalCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medicalCheckKeyReleased
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            if (medicalCheck.isSelected() == true) {
//                medicalCheck.setSelected(false);
//                medical = 1;
//            } else {
//                medicalCheck.setSelected(true);
//                medical = 0;
//            }
//
        //} else 
   }//GEN-LAST:event_medicalCheckKeyReleased

    private void nicPhotocopyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicPhotocopyCheckActionPerformed
        if (nicPhotocopyCheck.isSelected() == true) {
            nicPhotocopy = 1;
        } else {
            nicPhotocopy = 0;
        }
        birthCertiCheck.requestFocus();
    }//GEN-LAST:event_nicPhotocopyCheckActionPerformed

    private void nicPhotocopyCheckKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicPhotocopyCheckKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (nicPhotocopyCheck.isSelected() == true) {
                nicPhotocopyCheck.setSelected(false);
                nicPhotocopy = 1;
            } else {
                nicPhotocopyCheck.setSelected(true);
                nicPhotocopy = 0;
            }

        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            medicalCheck.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            birthCertiCheck.requestFocus();
        }
    }//GEN-LAST:event_nicPhotocopyCheckKeyPressed

    private void birthCertiCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_birthCertiCheckActionPerformed
        if (birthCertiCheck.isSelected() == true) {
            bCertificate = 1;
        } else {
            bCertificate = 0;
        }

        oldLicenceCheck.requestFocus();

    }//GEN-LAST:event_birthCertiCheckActionPerformed

    private void birthCertiCheckKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_birthCertiCheckKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateButton.requestFocus();
//            if (birthCertiCheck.isSelected() == true) {
//                birthCertiCheck.setSelected(false);
//                bCertificate = 1;
//            } else {
//                birthCertiCheck.setSelected(true);
//                bCertificate = 0;
//            }

        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            nicPhotocopyCheck.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            if (birthCertiCheck.isSelected() == true) {
                birthCertiCheck.setSelected(false);
                bCertificate = 1;
            } else {
                birthCertiCheck.setSelected(true);
                bCertificate = 0;
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {

            oldLicenceCheck.requestFocus();

        }
    }//GEN-LAST:event_birthCertiCheckKeyPressed

    private void oldLicenceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldLicenceCheckActionPerformed
        if (oldLicenceCheck.isSelected() == true) {
            oldLicense = 1;
        } else {
            oldLicense = 0;
        }

        driLicNoText.requestFocus();
    }//GEN-LAST:event_oldLicenceCheckActionPerformed

    private void maleRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleRButtonActionPerformed
   }//GEN-LAST:event_maleRButtonActionPerformed

    private void maleRButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maleRButtonKeyPressed
   }//GEN-LAST:event_maleRButtonKeyPressed
    int x = 0, y = 0;
    private void maleRButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maleRButtonKeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            x++;
            maleRButton.setSelected(true);
            if (x > 1) {

                classComboBox.requestFocus();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            femaleRButton.setSelected(true);
            maleRButton.setSelected(false);

        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            addressText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            y++;
            maleRButton.setSelected(true);
            if (y > 1) {

                classComboBox.requestFocus();
            }
            classComboBox.requestFocus();
        }
    }//GEN-LAST:event_maleRButtonKeyReleased

    private void femaleRButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_femaleRButtonKeyPressed
   }//GEN-LAST:event_femaleRButtonKeyPressed

    private void femaleRButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_femaleRButtonKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            femaleRButton.setSelected(true);
            classComboBox.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            femaleRButton.setSelected(false);
            maleRButton.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            addressText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            classComboBox.requestFocus();
        }
    }//GEN-LAST:event_femaleRButtonKeyReleased

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            getStudentDetails();

            int res = StudentController.updateStudentCompletely(student);
            if (res > 0) {
                JOptionPane.showMessageDialog(StudentDetailManager.this, "Update Successful!");
            } else {
                JOptionPane.showMessageDialog(StudentDetailManager.this, "Update Unsuccessful!");
            }
            setNullText();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void classComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classComboBoxActionPerformed
        try {
            if (classComboBox.getSelectedItem() != null) {
                vcs = VehicleClassController.searchVehicleClassSetByName(classComboBox.getSelectedItem().toString());
                ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, vcs.getClassId());
            } else {
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_classComboBoxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            int res = StudentController.deleteStudent(sid);
            if (res > 0) {
                JOptionPane.showMessageDialog(StudentDetailManager.this, "Deleted!");
            } else {
                JOptionPane.showMessageDialog(StudentDetailManager.this, "Failed!");
            }
            setNullText();
            if (trainingRButton.isSelected() == true) {
                ComboItemsAdder.addAllStudentTraining(studentCombo);
            } else if (finishedRButton.isSelected() == true) {
                ComboItemsAdder.addAllStudentFinished(studentCombo);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void lectureDateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lectureDateTextKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_lectureDateTextKeyPressed

    private void registrationIdComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationIdComboActionPerformed
        System.out.println("reg");
        addDataToFormByRid();
    }//GEN-LAST:event_registrationIdComboActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            InputStream inputStream = getClass().getResourceAsStream("/dsms/reports/studentCompleteReport.jrxml");
            HashMap map = new HashMap();
            map.put("registration_id", registrationIdCombo.getSelectedItem().toString());
            String nameAndSid = studentCombo.getSelectedItem().toString();
            StringTokenizer st = new StringTokenizer(nameAndSid, "_");
            String name = st.nextToken();
            String studentId = st.nextToken();
            map.put("student_id", studentId);
            map.put("name_with_initials", nameWithInitialsText.getText());
            map.put("surname", surnameText.getText());
            map.put("telephone", telText.getText());
            map.put("address", addressText.getText());
            map.put("nic_no", nicText.getText());
            String gender;
            if (buttonGroup1.getSelection() == maleRButton.getModel()) {
                gender = "male";
            } else {
                gender = "female";
            }
            map.put("gender", gender);
            map.put("vehicle_class", classComboBox.getSelectedItem().toString());
            map.put("instructor", instructorComboBox.getSelectedItem().toString());
            map.put("total_fee", totalFeeText.getText());
            map.put("discount", discountText.getText());
            map.put("paid_total", paidTotalText.getText());
            map.put("balance_to_pay", balanceToPayText.getText());
            map.put("lecture_date", lectureDateText.getText());
            map.put("old_license_number", driLicNoText.getText());
            map.put("date_of_issue", dlIssueDateText.getText());
            map.put("date_of_expire", dlExpireDateText.getText());
            if (classComboBox1.getSelectedItem() != null) {
                map.put("old_vehicle_class", classComboBox1.getSelectedItem().toString());
            }
            map.put("exam_date", examDateText.getText());
            map.put("exam_result", examResultText.getText());
            map.put("trial_date", trialDateText.getText());
            map.put("trial_result", trialResultText.getText());
            map.put("date_of_registration", dateOfRegText.getText());

            JasperViewer jv = ReportConnector.sendHashMap(inputStream, map);
            ReportConnector.viewInDialog(jv);
        } catch (ClassNotFoundException | SQLException | JRException ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void dateOfRegTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateOfRegTextKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateOfRegTextKeyPressed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        addDataToForm();
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void telTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telTextKeyReleased
        notValidTelLabel1.setVisible(false);
        String newText = PatternsChecker.checkTelNum(telText.getText());
        telText.setText(newText);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (telText.getText().length() == 10) {

                addressText.requestFocus();
            } else {
                notValidTelLabel1.setVisible(true);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            addressText.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            surnameText.requestFocus();
        }
        enableSave();
    }//GEN-LAST:event_telTextKeyReleased

    private void nicTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicTextKeyReleased
        notValidNicLabel.setVisible(false);
        String newText = PatternsChecker.checkNIC(nicText.getText());
        nicText.setText(newText);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (nicText.getText().length() == 10) {
                maleRButton.requestFocus();
                maleRButton.setSelected(true);
            } else {
                notValidNicLabel.setVisible(true);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            maleRButton.requestFocus();
            maleRButton.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            surnameText.requestFocus();
        }
        enableSave();
    }//GEN-LAST:event_nicTextKeyReleased
    public final void setNullText() {


        nameWithInitialsText.setText(null);
        surnameText.setText(null);
        addressText.setText(null);
        nicText.setText(null);
        telText.setText(null);

        oldLicenceCheck.setEnabled(false);
        photoCheck.setSelected(false);
        nicPhotocopyCheck.setSelected(false);
        birthCertiCheck.setSelected(false);
        medicalCheck.setSelected(false);
        discountText.setText("0");
        totalFeeText.setEditable(false);
        buttonGroup2.clearSelection();

        photoCheck.setSelected(false);
        nicPhotocopyCheck.setSelected(false);
        birthCertiCheck.setSelected(false);
        oldLicenceCheck.setSelected(false);
        medicalCheck.setSelected(false);

        lectureDateText.setText(null);
        examDateText.setText(null);
        examResultText.setText(null);
        trialDateText.setText(null);
        trialResultText.setText(null);

        totalFeeText.setText(null);
        paidTotalText.setText(null);
        balanceToPayText.setText(null);
        discountText.setText(null);
        try {
            ComboItemsAdder.addAllVehicleClass(classComboBox);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }



        String cid = classComboBox.getSelectedItem().toString();
        // nameWithInitialsText.setRequestFocusEnabled(true);
    }

    private void enableSave() {
        if ((nameWithInitialsText.getText().length() > 0)
                && (addressText.getText().length() > 0)
                && (telText.getText().length() > 0)
                && (nicText.getText().length() > 0) // & buttonGroup1.getSelection()!=null
                ) {
            updateButton.setEnabled(true);
            printButton.setEnabled(true);
            deleteButton.setEnabled(true);
        } else if ((nameWithInitialsText.getText().length() == 0)
                && (addressText.getText().length() == 0)
                && (telText.getText().length() == 0)
                && (nicText.getText().length() == 0) // & buttonGroup1.getSelection()!=null
                ) {
            updateButton.setEnabled(false);
            printButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
    }

    private void addDataToForm() {
        if (studentCombo.getSelectedItem() != null) {

            String nameAndSid = studentCombo.getSelectedItem().toString();
            StringTokenizer st = new StringTokenizer(nameAndSid, "_");
            String name = st.nextToken();
            String sid1 = st.nextToken();
            if (classComboBox.getSelectedItem() != null) {
                try {
                    student = StudentController.searchStudent(sid1);
                    nameWithInitialsText.setText(student.getNameWithInitials());
                    surnameText.setText(student.getSurName());
                    telText.setText(student.getStudentTel());
                    addressText.setText(student.getAddress());
                    nicText.setText(student.getNic());
                    String gender = student.getGender();
                    System.out.println(sid1);
                    if (gender.equals("male")) {
                        maleRButton.setSelected(true);
                        femaleRButton.setSelected(false);
                    } else {
                        femaleRButton.setSelected(true);
                        maleRButton.setSelected(false);
                    }
// if (registrationIdCombo.getItemCount()==0) {
//                        ComboItemsAdder.addAllRegistrationsOfAStudent(registrationIdCombo, sid);
//                        registration = RegistrationController.searchRegistration(registrationIdCombo.getSelectedItem().toString());
//                    } else {
//                        registration = RegistrationController.searchRegistration(registrationIdCombo.getSelectedItem().toString());
//                    }
                    registrationIdCombo.removeAllItems();
                    if (sid1 == sid) {
                        sid = sid1;
                        System.out.println("same");
                    } else {
                        System.out.println("differ");
                        ComboItemsAdder.addAllRegistrationsOfAStudent(registrationIdCombo, sid1);
                        sid = sid1;
                    }
                    registration = null;
                    if (registrationIdCombo.getSelectedItem() != null) {
                        registration = RegistrationController.searchRegistration(registrationIdCombo.getSelectedItem().toString());
                    }
                    if (registration != null) {
                        lectureDateText.setText(registration.getLectureDate());
                        vcs = VehicleClassController.searchVehicleClassSet(registration.getClassId());
                        String classType = vcs.getClassType();
                        dateOfRegText.setText(registration.getDateOfRegistration());
                        classComboBox.setSelectedItem(classType);
                        try {

                            ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, vcs.getClassId());
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (OldLicenseDetailController.searchOldLicenseDetail(sid) != null) {
                            try {
                                oldLicensePanel.setEnabled(true);
                                setLicensePanelEnabled(true);
                                oldLicenceCheck.setEnabled(true);
                                ComboItemsAdder.addAllVehicleClass(classComboBox1);
                                OldLicenseDetail oldLicenseDetail = OldLicenseDetailController.searchOldLicenseDetail(sid);
                                if (oldLicenseDetail != null) {
                                    System.out.println("a");
                                    driLicNoText.setText(oldLicenseDetail.getOldDriverLicenceNo());
                                    dlIssueDateText.setText(oldLicenseDetail.getOldDriverLicenceIssueDate());
                                    dlExpireDateText.setText(oldLicenseDetail.getOldDriverLicenceExpireDate());
                                    classComboBox1.setSelectedItem(oldLicenseDetail.getClasses());
                                    ComboItemsAdder.addAllVehicleClass(classComboBox1);
                                }
                            } catch (ClassNotFoundException | SQLException ex) {
                                Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        } else {
                            oldLicensePanel.setEnabled(false);
                            setLicensePanelEnabled(false);
                            oldLicenceCheck.setEnabled(false);
                        }
                        double paidTotal = CalculationMaker.paymentsAdder(registration.getRegistrationId());
                        paidTotalText.setText(Double.toString(paidTotal));
                        Instructor instructor = InstructorController.searchInstructor(registration.getInstructorId());
                        //ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, classComboBox.getSelectedItem().toString());
                        String instructorName = instructor.getName();
                        instructorComboBox.setSelectedItem(instructorName);
                        System.out.println(instructorName);
                        totalFee = Double.valueOf(registration.getTotalFee());
                        totalFeeText.setText(Double.toString(totalFee));
                        discountText.setText(Double.toString(registration.getDiscount()));
                        balanceToPayText.setText(Double.toString(totalFee - paidTotal));
                    } else {

                        classComboBox.setSelectedItem(null);
                        instructorComboBox.setSelectedItem(null);
                    }

                    docs = DocumentSetController.searchDocumentSet(registration.getRegistrationId());
                    if (docs != null) {
                        if (docs.getFivePhoto() == 1) {
                            photoCheck.setSelected(true);
                        } else {
                            photoCheck.setSelected(false);
                        }
                        if (docs.getIdentityCopy() == 1) {
                            nicPhotocopyCheck.setSelected(true);
                        } else {
                            nicPhotocopyCheck.setSelected(false);
                        }
                        if (docs.getLicenceCopy() == 1) {
                            oldLicenceCheck.setSelected(true);
                        } else {
                            oldLicenceCheck.setSelected(false);
                        }
                        if (docs.getMedicalReport() == 1) {
                            medicalCheck.setSelected(true);
                        } else {
                            medicalCheck.setSelected(false);
                        }
                        if (docs.getbCertiCopy() == 1) {
                            birthCertiCheck.setSelected(true);
                        } else {
                            birthCertiCheck.setSelected(false);
                        }
                    }
                    examDetail = ExamDetailController.searchLastExamResult(registration.getRegistrationId());
                    if (examDetail != null) {
                        examDateText.setText(examDetail.getDate());
                        if (examDetail.getResult() == 0) {
                            examResultText.setText("Not paiticipated");
                        } else if (examDetail.getResult() == 1) {
                            examResultText.setText("Passed");
                        } else if (examDetail.getResult() == -1) {
                            examResultText.setText("Failed");
                        }

                    } else {
                        examDateText.setText("Not yet");
                        examResultText.setText("Not yet");
                    }
                    trialDetail = TrialDetailController.searchLastTrialResult(registration.getRegistrationId());
                    if (trialDetail != null) {
                        trialDateText.setText(trialDetail.getDate());
                        if (trialDetail.getResult() == 0) {
                            trialResultText.setText("Not paiticipated");
                        } else if (trialDetail.getResult() == 1) {
                            trialResultText.setText("Passed");
                        } else if (trialDetail.getResult() == -1) {
                            trialResultText.setText("Failed");
                        }

                    } else {
                        trialDateText.setText("Not yet");
                        trialResultText.setText("Not yet");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void setLicensePanelEnabled(boolean bool) {
        driLicNoText.setEnabled(bool);
        oldVehicleClassLabel.setEnabled(bool);
        driLicNoLabel.setEnabled(bool);
        dlExpireDateText.setEnabled(bool);
        dlExpireDateLabel.setEnabled(bool);
        dlIssueDateLabel.setEnabled(bool);
        dlIssueDateText.setEnabled(bool);
        classComboBox1.setEnabled(bool);
    }

    private void addDataToFormByRid() {
        if (studentCombo.getSelectedItem() != null) {
            String nameAndSid = studentCombo.getSelectedItem().toString();
            StringTokenizer st = new StringTokenizer(nameAndSid, "_");
            String name = st.nextToken();
            sid = st.nextToken();
            if (classComboBox.getSelectedItem().toString() != null) {


                try {
                    student = StudentController.searchStudent(sid);
                    nameWithInitialsText.setText(student.getNameWithInitials());
                    surnameText.setText(student.getSurName());
                    telText.setText(student.getStudentTel());
                    addressText.setText(student.getAddress());
                    nicText.setText(student.getNic());
                    String gender = student.getGender();
                    System.out.println(sid);
                    if (gender.equals("male")) {
                        maleRButton.setSelected(true);
                        femaleRButton.setSelected(false);
                    } else {
                        femaleRButton.setSelected(true);
                        maleRButton.setSelected(false);
                    }

                    // ComboItemsAdder.addAllRegistrationsOfAStudent(registrationIdCombo, sid);
                    if (registrationIdCombo.getItemCount() == 0) {
                        System.out.println("zera");
                        ComboItemsAdder.addAllRegistrationsOfAStudent(registrationIdCombo, sid);
                        registration = RegistrationController.searchRegistration(registrationIdCombo.getSelectedItem().toString());
                    } else {
                        System.out.println("avai");
                        registration = RegistrationController.searchRegistration(registrationIdCombo.getSelectedItem().toString());
                    }
                    if (registration != null) {
                        if (registration.getStatus() == 0) {
                            finishedLabel.setVisible(true);
                        } else {
                            finishedLabel.setVisible(false);
                        }
                        dateOfRegText.setText(registration.getDateOfRegistration());
                        lectureDateText.setText(registration.getLectureDate());
                        vcs = VehicleClassController.searchVehicleClassSet(registration.getClassId());
                        String classType = vcs.getClassType();
                        classComboBox.setSelectedItem(classType);
                        try {

                            ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, vcs.getClassId());
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (OldLicenseDetailController.searchOldLicenseDetail(sid) != null) {
                            try {
                                oldLicensePanel.setEnabled(true);
                                setLicensePanelEnabled(false);
                                oldLicenceCheck.setEnabled(true);
                                ComboItemsAdder.addAllVehicleClass(classComboBox1);
                                OldLicenseDetail oldLicenseDetail = OldLicenseDetailController.searchOldLicenseDetail(sid);
                                if (oldLicenseDetail != null) {
                                    System.out.println("a");
                                    driLicNoText.setText(oldLicenseDetail.getOldDriverLicenceNo());
                                    dlIssueDateText.setText(oldLicenseDetail.getOldDriverLicenceIssueDate());
                                    dlExpireDateText.setText(oldLicenseDetail.getOldDriverLicenceExpireDate());
                                    classComboBox1.setSelectedItem(oldLicenseDetail.getClasses());
                                    ComboItemsAdder.addAllVehicleClass(classComboBox1);
                                }
                            } catch (ClassNotFoundException | SQLException ex) {
                                Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        } else {
                            oldLicensePanel.setEnabled(false);
                            setLicensePanelEnabled(false);
                            oldLicenceCheck.setEnabled(false);
                        }
                        double paidTotal = CalculationMaker.paymentsAdder(registration.getRegistrationId());
                        paidTotalText.setText(Double.toString(paidTotal));
                        Instructor instructor = InstructorController.searchInstructor(registration.getInstructorId());
                        //ComboItemsAdder.addInstructorsOfVehicleClass(instructorComboBox, classComboBox.getSelectedItem().toString());
                        String instructorName = instructor.getName();
                        instructorComboBox.setSelectedItem(instructorName);
                        System.out.println(instructorName);
                        totalFee = Double.valueOf(registration.getTotalFee());
                        totalFeeText.setText(Double.toString(totalFee));
                        discountText.setText(Double.toString(registration.getDiscount()));
                        balanceToPayText.setText(Double.toString(totalFee - paidTotal));
                    } else {

                        classComboBox.setSelectedItem(null);
                        instructorComboBox.setSelectedItem(null);
                    }

                    docs = DocumentSetController.searchDocumentSet(registration.getRegistrationId());
                    if (docs != null) {
                        if (docs.getFivePhoto() == 1) {
                            photoCheck.setSelected(true);
                        } else {
                            photoCheck.setSelected(false);
                        }
                        if (docs.getIdentityCopy() == 1) {
                            nicPhotocopyCheck.setSelected(true);
                        } else {
                            nicPhotocopyCheck.setSelected(false);
                        }
                        if (docs.getLicenceCopy() == 1) {
                            oldLicenceCheck.setSelected(true);
                        } else {
                            oldLicenceCheck.setSelected(false);
                        }
                        if (docs.getMedicalReport() == 1) {
                            medicalCheck.setSelected(true);
                        } else {
                            medicalCheck.setSelected(false);
                        }
                        if (docs.getbCertiCopy() == 1) {
                            birthCertiCheck.setSelected(true);
                        } else {
                            birthCertiCheck.setSelected(false);
                        }
                    }
                    examDetail = ExamDetailController.searchLastExamResult(registration.getRegistrationId());
                    if (examDetail != null) {
                        examDateText.setText(examDetail.getDate());
                        if (examDetail.getResult() == 0) {
                            examResultText.setText("Not paiticipated");
                        } else if (examDetail.getResult() == 1) {
                            examResultText.setText("Passed");
                        } else if (examDetail.getResult() == -1) {
                            examResultText.setText("Failed");
                        }

                    } else {
                        examDateText.setText("Not yet");
                        examResultText.setText("Not yet");
                    }
                    trialDetail = TrialDetailController.searchLastTrialResult(registration.getRegistrationId());
                    if (trialDetail != null) {
                        trialDateText.setText(trialDetail.getDate());
                        if (trialDetail.getResult() == 0) {
                            trialResultText.setText("Not paiticipated");
                        } else if (trialDetail.getResult() == 1) {
                            trialResultText.setText("Passed");
                        } else if (trialDetail.getResult() == -1) {
                            trialResultText.setText("Failed");
                        }

                    } else {
                        trialDateText.setText("Not yet");
                        trialResultText.setText("Not yet");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(StudentDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void getStudentDetails() throws SQLException, ClassNotFoundException {
        String nameAndSid = studentCombo.getSelectedItem().toString();
        StringTokenizer st = new StringTokenizer(nameAndSid, "_");
        String name = st.nextToken();
        sid = st.nextToken();
        int status;
        if (buttonGroup2.getSelection() == trainingRButton.getModel()) {
            status = 1;
        } else {
            status = 0;
        }
        double discount = Double.parseDouble(discountText.getText());
        String nameWithInitials = nameWithInitialsText.getText();
        String surName = surnameText.getText();
        String address = addressText.getText();
        String nic = nicText.getText();
        String gender;
        if (buttonGroup1.getSelection() == maleRButton.getModel()) {
            gender = "male";
        } else {
            gender = "female";
        }
        String tel = (telText.getText());
        String date = null;
        date = registration.getDateOfRegistration();
        String lectureDate = lectureDateText.getText();
        driLicNo = driLicNoText.getText();
        dlExpiredate = dlExpireDateText.getText();
        dlIssueDate = dlIssueDateText.getText();
        String classType = classComboBox.getSelectedItem().toString();
        VehicleClassSet vehicleClassSet;
        String cid = null;

        vehicleClassSet = VehicleClassController.searchVehicleClassSetByName(classType);
        cid = vehicleClassSet.getClassId();

        String instructorName = instructorComboBox.getSelectedItem().toString();
        Instructor instructor;
        String iid = null;
        instructor = InstructorController.searchInstructorByName(instructorName);
        iid = instructor.getInstructorId();

        student = new Student(sid, nameWithInitials, surName, address, nic, tel, gender);
        registration = new Registration(registration.getRegistrationId(), sid, cid, iid, date, discount, totalFee, lectureDate, status);
        docs = new DocumentSet(registration.getRegistrationId(), fivePhotos, medical, nicPhotocopy, bCertificate, oldLicense);
        oldLicensedetail = new OldLicenseDetail(sid, driLicNo, dlIssueDate, dlExpiredate, classes);
        registration.setOldLicensedetail(oldLicensedetail);
        registration.setDocs(docs);
        student.setRegistration(registration);



    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressText;
    private javax.swing.JLabel balanceToPayLabel;
    private javax.swing.JTextField balanceToPayText;
    private javax.swing.JCheckBox birthCertiCheck;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox classComboBox;
    private javax.swing.JComboBox classComboBox1;
    private javax.swing.JLabel classLabel;
    private javax.swing.JTextField dateOfRegText;
    private javax.swing.JToggleButton deleteButton;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountText;
    private javax.swing.JLabel dlExpireDateLabel;
    private javax.swing.JTextField dlExpireDateText;
    private javax.swing.JLabel dlIssueDateLabel;
    private javax.swing.JTextField dlIssueDateText;
    private javax.swing.JLabel driLicNoLabel;
    private javax.swing.JTextField driLicNoText;
    private javax.swing.JTextField examDateText;
    private javax.swing.JTextField examResultText;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton femaleRButton;
    private javax.swing.JLabel finishedLabel;
    private javax.swing.JRadioButton finishedRButton;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JComboBox instructorComboBox;
    private javax.swing.JLabel instructorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField lectureDateText;
    private javax.swing.JRadioButton maleRButton;
    private javax.swing.JCheckBox medicalCheck;
    private javax.swing.JLabel nameWithInitialsLabel;
    private javax.swing.JTextField nameWithInitialsText;
    private javax.swing.JLabel nicLabel;
    private javax.swing.JCheckBox nicPhotocopyCheck;
    private javax.swing.JTextField nicText;
    private javax.swing.JLabel notValidNicLabel;
    private javax.swing.JLabel notValidTelLabel;
    private javax.swing.JLabel notValidTelLabel1;
    private javax.swing.JCheckBox oldLicenceCheck;
    private javax.swing.JPanel oldLicensePanel;
    private javax.swing.JLabel oldVehicleClassLabel;
    private javax.swing.JLabel paidTotalLabel;
    private javax.swing.JTextField paidTotalText;
    private javax.swing.JCheckBox photoCheck;
    private javax.swing.JToggleButton printButton;
    private javax.swing.JComboBox registrationIdCombo;
    private javax.swing.JToggleButton searchButton1;
    private javax.swing.JComboBox studentCombo;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTextField surnameText;
    private javax.swing.JLabel telLabel;
    private javax.swing.JTextField telText;
    private javax.swing.JLabel totalFeeLabel1;
    private javax.swing.JTextField totalFeeText;
    private javax.swing.JRadioButton trainingRButton;
    private javax.swing.JTextField trialDateText;
    private javax.swing.JTextField trialResultText;
    private javax.swing.JToggleButton updateButton;
    // End of variables declaration//GEN-END:variables
}
